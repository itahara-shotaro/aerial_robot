STM32Hardware.h:196:12:uint32_t STM32Hardware::time()	16	static
time.h:51:3:ros::Time::Time()	16	static
publisher.h:53:7:int ros::Publisher::publish(const ros::Msg*)	16	static
gps_backend.h:91:20:const GPS_State& GPS_Backend::getGpsState()	16	static
gps_backend.cpp:14:6:void GPS_Backend::init(UART_HandleTypeDef*, ros::NodeHandle*)	24	static
gps_backend.cpp:31:6:bool GPS_Backend::available()	24	static
gps_backend.cpp:37:5:int GPS_Backend::read()	24	static
gps_backend.cpp:58:6:virtual void GPS_Backend::publish()	32	static
node_handle.h:432:8:bool ros::NodeHandle_<Hardware, MAX_SUBSCRIBERS, MAX_PUBLISHERS, INPUT_SIZE, OUTPUT_SIZE>::subscribe(SubscriberT&) [with SubscriberT = ros::Subscriber<std_msgs::UInt8, GPS_Backend>; Hardware = STM32Hardware; int MAX_SUBSCRIBERS = 50; int MAX_PUBLISHERS = 50; int INPUT_SIZE = 512; int OUTPUT_SIZE = 512]	24	static
node_handle.h:415:8:bool ros::NodeHandle_<Hardware, MAX_SUBSCRIBERS, MAX_PUBLISHERS, INPUT_SIZE, OUTPUT_SIZE>::advertise(ros::Publisher&) [with Hardware = STM32Hardware; int MAX_SUBSCRIBERS = 50; int MAX_PUBLISHERS = 50; int INPUT_SIZE = 512; int OUTPUT_SIZE = 512]	24	static
node_handle.h:392:8:ros::Time ros::NodeHandle_<Hardware, MAX_SUBSCRIBERS, MAX_PUBLISHERS, INPUT_SIZE, OUTPUT_SIZE>::now() [with Hardware = STM32Hardware; int MAX_SUBSCRIBERS = 50; int MAX_PUBLISHERS = 50; int INPUT_SIZE = 512; int OUTPUT_SIZE = 512]	24	static
